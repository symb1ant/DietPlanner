@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DietPlanner.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<StatusMessage Message="@message" />
<EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <MudText Typo="Typo.h5">Update Email</MudText>
    <MudText Typo="Typo.body1" Paragraph="true">Use this form to update your email address</MudText>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />
    @if (isEmailConfirmed)
    {
        <div class="form-floating mb-3 input-group">
            <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled />
            <div class="input-group-append">
                <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
            </div>
            <label for="email" class="form-label">Email</label>
        </div>
    }
    else
    {
        <div class="form-floating mb-3">
            <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled />
            <label for="email" class="form-label">Email</label>
        </div>
    }
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email." />
        <label for="new-email" class="form-label">New email</label>
        <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
    </div>
    <button type="submit" class="btn btn-primary">Change email</button>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);

        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        user.Email = Input.NewEmail;
        user.EmailConfirmed = true;
        user.UserName = Input.NewEmail;

        var result = await UserManager.UpdateAsync(user);
        if (!result.Succeeded)
        {
            message = "Error changing email.";
            return;
        }

        message = "Thank you, your email address has been updated";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
