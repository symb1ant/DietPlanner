@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DietPlanner.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<StatusMessage Message="@statusMessage" />

<DataAnnotationsValidator />
<MudText Typo="Typo.h5">Thank You</MudText>
<MudText Typo="Typo.body1" Paragraph="true">Thank you for registering, please <MudLink Href="/Account/Login">click here</MudLink> to login and start using Ever-Fitter</MudText>


@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        // var user = await UserManager.FindByEmailAsync(Email);
        // if (user is null)
        // {
        //     HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
        //     statusMessage = "Error finding user for unspecified email";
        // }
        // else if (EmailSender is IdentityNoOpEmailSender)
        // {
        //     // Once you add a real email sender, you should remove this code that lets you confirm the account
        //     var userId = await UserManager.GetUserIdAsync(user);
        //     var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        //     emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
        //         NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //         new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        // }
    }
}
